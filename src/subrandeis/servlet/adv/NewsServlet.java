package subrandeis.servlet.adv;

import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import subrandeis.api.GithubAPI;
import subrandeis.api.Log;
import subrandeis.api.SecretsAPI;
import subrandeis.api.UserAPI;
import subrandeis.entities.Story;
import subrandeis.servlet.basic.JSPRenderServlet;

@SuppressWarnings("serial")
public class NewsServlet extends HttpServlet{
	
	public void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException{
		
		req.setAttribute("isAdmin", UserAPI.isAdmin());
		req.setAttribute("stories", Story.getAll());
		req.setAttribute("production", false);
		
		resp.setContentType("text/html");
		RequestDispatcher jsp = req.getRequestDispatcher("/WEB-INF/pages/news.jsp");
		jsp.forward(req, resp);
		return;
		
	}
	
	public void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException{
		if (!UserAPI.isAdmin()){
			resp.getWriter().println("Log in with a valid account to make changes to the news.");
			return;
		}
		String action = req.getParameter("action");
		if ("create".equals(action)){
			doNewNewsStory(req, resp);
		} else if ("update".equals(action)){
			doUpdateNewsStory(req, resp);
		} else if ("delete".equals(action)){
			doDeleteNewsStory(req, resp);
		}
	}
	
	public void doDeleteNewsStory(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		
		String storyId = req.getParameter("storyId");
		Story.delete(storyId);
		String message = String.format(
				"[Story [%s] deleted by user [%s] on [%s].",
				storyId,
				UserAPI.email(),
				(new Date()).toString()
		);
		
		Log.info(message);
		
		doUpdateNewsPage(req, resp);
		
		resp.sendRedirect("/news");
		
	}
	
	public void doUpdateNewsStory(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		
		String storyId = req.getParameter("storyId");
		String title = req.getParameter("storyTitle");
		String body = req.getParameter("storyBody");
	
		Story story = Story.get(storyId);
		if (title == null || body == null || story == null){
			resp.getWriter().println("Check your API call (New News Story, NewsServlet). Story MIGHT not exist.");
			return;
		} 
		
		story.update(title, body);
		
		String message = String.format(
				"[Story [%s] updated by user [%s] on [%s].",
				story.storyId,
				UserAPI.email(),
				(new Date()).toString()
		);
		
		doUpdateNewsPage(req, resp);
		
		Log.info(message);
		
		resp.sendRedirect("/news");
		
	}
	
	public void doNewNewsStory(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		
		String title = req.getParameter("storyTitle");
		String body = req.getParameter("storyBody");
		
		if (title == null || body == null){
			resp.getWriter().println("Check your API call (New News Story, NewsServlet)");
			return;
		} 
		
		doUpdateNewsPage(req, resp);
		
		resp.sendRedirect("/news");
		
	}
	
	public void doUpdateNewsPage(HttpServletRequest req, HttpServletResponse resp) throws IOException{
		
		List<Story> stories = Story.getAll();
		
		req.setAttribute("production", true);
		req.setAttribute("stories", stories);
		req.setAttribute("jsp-file", "/WEB-INF/pages/news.jsp");
		
		resp.sendRedirect("/jsp-render-servlet");
		
		String content = (String) req.getAttribute(JSPRenderServlet.responseKey);
		
		String message = String.format(
				"News auto generated by [%s] on [%s].", 
				UserAPI.email(), 
				(new Date()).toString()
		);
		
		GithubAPI.updateFile(
				SecretsAPI.WebsiteRepository,
				"news/index.html",
				message,
				content
		);
		
		Log.info(message);
		
	}

}